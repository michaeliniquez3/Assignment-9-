{
  
    
        "post0": {
            "title": "Assignment #9",
            "content": "Assignment #5: Web Scraping . import pandas as pd . import requests . Response = requests.get(&quot;https://corgis-edu.github.io/corgis/csv/&quot;) . Response . &lt;Response [200]&gt; . . . from bs4 import BeautifulSoup . html_string = Response.text . document = BeautifulSoup(html_string, &quot;html.parser&quot;) . corgis_list = [] . for i in document.find_all(&quot;h3&quot;): corgis_list.append(i.text.strip()) . corgis_list . [&#39;Aids&#39;, &#39;Airlines&#39;, &#39;Billionaires&#39;, &#39;Broadway&#39;, &#39;Business Dynamics&#39;, &#39;Cancer&#39;, &#39;Cars&#39;, &#39;Classics&#39;, &#39;Construction Permits&#39;, &#39;Construction Spending&#39;, &#39;County Demographics&#39;, &#39;Covid&#39;, &#39;Drugs&#39;, &#39;Earthquakes&#39;, &#39;Election&#39;, &#39;Electricity&#39;, &#39;Emissions&#39;, &#39;Energy&#39;, &#39;Finance&#39;, &#39;Food&#39;, &#39;Food Access&#39;, &#39;Global Development&#39;, &#39;Graduates&#39;, &#39;Health&#39;, &#39;Hospitals&#39;, &#39;Hydropower&#39;, &#39;Ingredients&#39;, &#39;Injuries&#39;, &#39;Labor&#39;, &#39;Medal Of Honor&#39;, &#39;Music&#39;, &#39;Opioids&#39;, &#39;Police Shootings&#39;, &#39;Publishers&#39;, &#39;Real Estate&#39;, &#39;Retail Services&#39;, &#39;School Scores&#39;, &#39;Skyscrapers&#39;, &#39;Slavery&#39;, &#39;State Crime&#39;, &#39;State Demographics&#39;, &#39;State Fragility&#39;, &#39;Suicide Attacks&#39;, &#39;Supreme Court&#39;, &#39;Tate&#39;, &#39;Video Games&#39;, &#39;Weather&#39;, &#39;Wind Turbines&#39;] . document.find_all(&quot;h3&quot;) . [&lt;h3&gt;Aids&lt;/h3&gt;, &lt;h3&gt;Airlines&lt;/h3&gt;, &lt;h3&gt;Billionaires&lt;/h3&gt;, &lt;h3&gt;Broadway&lt;/h3&gt;, &lt;h3&gt;Business Dynamics&lt;/h3&gt;, &lt;h3&gt;Cancer&lt;/h3&gt;, &lt;h3&gt;Cars&lt;/h3&gt;, &lt;h3&gt;Classics&lt;/h3&gt;, &lt;h3&gt;Construction Permits&lt;/h3&gt;, &lt;h3&gt;Construction Spending&lt;/h3&gt;, &lt;h3&gt;County Demographics&lt;/h3&gt;, &lt;h3&gt;Covid&lt;/h3&gt;, &lt;h3&gt;Drugs&lt;/h3&gt;, &lt;h3&gt;Earthquakes&lt;/h3&gt;, &lt;h3&gt;Election&lt;/h3&gt;, &lt;h3&gt;Electricity&lt;/h3&gt;, &lt;h3&gt;Emissions&lt;/h3&gt;, &lt;h3&gt;Energy&lt;/h3&gt;, &lt;h3&gt;Finance&lt;/h3&gt;, &lt;h3&gt;Food&lt;/h3&gt;, &lt;h3&gt;Food Access&lt;/h3&gt;, &lt;h3&gt;Global Development&lt;/h3&gt;, &lt;h3&gt;Graduates&lt;/h3&gt;, &lt;h3&gt;Health&lt;/h3&gt;, &lt;h3&gt;Hospitals&lt;/h3&gt;, &lt;h3&gt;Hydropower&lt;/h3&gt;, &lt;h3&gt;Ingredients&lt;/h3&gt;, &lt;h3&gt;Injuries&lt;/h3&gt;, &lt;h3&gt;Labor&lt;/h3&gt;, &lt;h3&gt;Medal Of Honor&lt;/h3&gt;, &lt;h3&gt;Music&lt;/h3&gt;, &lt;h3&gt;Opioids&lt;/h3&gt;, &lt;h3&gt;Police Shootings&lt;/h3&gt;, &lt;h3&gt;Publishers&lt;/h3&gt;, &lt;h3&gt;Real Estate&lt;/h3&gt;, &lt;h3&gt;Retail Services&lt;/h3&gt;, &lt;h3&gt;School Scores&lt;/h3&gt;, &lt;h3&gt;Skyscrapers&lt;/h3&gt;, &lt;h3&gt;Slavery&lt;/h3&gt;, &lt;h3&gt;State Crime&lt;/h3&gt;, &lt;h3&gt;State Demographics&lt;/h3&gt;, &lt;h3&gt;State Fragility&lt;/h3&gt;, &lt;h3&gt;Suicide Attacks&lt;/h3&gt;, &lt;h3&gt;Supreme Court&lt;/h3&gt;, &lt;h3&gt;Tate&lt;/h3&gt;, &lt;h3&gt;Video Games&lt;/h3&gt;, &lt;h3&gt;Weather&lt;/h3&gt;, &lt;h3&gt;Wind Turbines&lt;/h3&gt;] . . def pdcorgis(x): #x = &quot;Covid&quot; x.lower() Response = requests.get(&quot;https://corgis-edu.github.io/corgis/csv/&quot; + x + &#39;/&#39;) html_string = Response.text document = BeautifulSoup(html_string, &quot;html.parser&quot;) #global corgisdf for i in document.find_all(&quot;a&quot;): if (i.has_attr(&#39;download&#39;)) == 1: print(i[&#39;href&#39;]) corgisdf = pd.read_csv(&quot;https://corgis-edu.github.io/corgis/csv/&quot; + x + &#39;/&#39; + i[&#39;href&#39;]) return corgisdf . Looking at Major and Avg. Income . pdcorgis(&#39;graduates&#39;) . ../../datasets/csv/graduates/graduates.csv . Year Demographics.Total Education.Major Salaries.Highest Salaries.Lowest Salaries.Mean Salaries.Median Salaries.Quantity Salaries.Standard Deviation Demographics.Ethnicity.Asians ... Employment.Work Activity.Design Employment.Work Activity.Development Employment.Work Activity.Human Resources Employment.Work Activity.Managing/Supervising People/Projects Employment.Work Activity.Other Employment.Work Activity.Productions/Operations/Maintenance Employment.Work Activity.Professional Service Employment.Work Activity.Qualitity/Productivity Management Employment.Work Activity.Sales, Purchasing, Marketing Employment.Work Activity.Teaching . 0 1993 | 1295598 | Biological Sciences | 999999.0 | 0.0 | 160585.73 | 51000.0 | 13432 | 297818.25 | 84495 | ... | 118772 | 191867 | 365049 | 539430 | 99749 | 103385 | 506252 | 269042 | 215169 | 381908 | . 1 1993 | 211875 | Chemical Engineering | 999999.0 | 9000.0 | 126176.52 | 56000.0 | 3375 | 245705.77 | 27531 | ... | 82344 | 76108 | 59299 | 102248 | 16361 | 30480 | 24690 | 63895 | 44780 | 17718 | . 2 1993 | 507616 | Chemistry | 999999.0 | 8000.0 | 148872.00 | 60000.0 | 7834 | 276000.33 | 49984 | ... | 81772 | 123256 | 121783 | 208278 | 35007 | 40898 | 129716 | 114801 | 78059 | 104191 | . 3 1993 | 336366 | Civil Engineering | 999999.0 | 10000.0 | 129070.55 | 50000.0 | 4035 | 259543.49 | 37295 | ... | 133430 | 62031 | 108338 | 203035 | 37940 | 28639 | 70727 | 116758 | 73133 | 26892 | . 4 1993 | 1070111 | Computer Science and Math | 999999.0 | 0.0 | 134299.53 | 49000.0 | 9996 | 269323.82 | 83826 | ... | 251941 | 200490 | 287405 | 439446 | 62482 | 73411 | 126083 | 223467 | 168404 | 234507 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 512 2015 | 1176525 | Sociology | 1223166.0 | 0.0 | 58871.70 | 50000.0 | 1798 | 62083.18 | 59244 | ... | 85782 | 151538 | 261143 | 415552 | 204818 | 72050 | 342903 | 183692 | 345302 | 301924 | . 513 2015 | 55738 | Statistics | 1038725.0 | 0.0 | 99210.87 | 88000.0 | 157 | 90534.66 | 16211 | ... | 13908 | 11798 | 8419 | 19960 | 3437 | 5489 | 12803 | 7736 | 10741 | 6290 | . 514 2015 | 169991 | Zoology, General | 1223166.0 | 0.0 | 86957.98 | 60000.0 | 317 | 124675.05 | 17563 | ... | 15366 | 30180 | 29873 | 60016 | 29924 | 24622 | 57404 | 30979 | 35810 | 56660 | . 515 2015 | 0 | Management &amp; Administration | 0.0 | 0.0 | 0.00 | 0.0 | 0 | 0.00 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 516 2015 | 0 | Political and related sciences | 0.0 | 0.0 | 0.00 | 0.0 | 0 | 0.00 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 517 rows × 50 columns . grad_df = pdcorgis(&#39;graduates&#39;) . ../../datasets/csv/graduates/graduates.csv . grad_df.head() . Year Demographics.Total Education.Major Salaries.Highest Salaries.Lowest Salaries.Mean Salaries.Median Salaries.Quantity Salaries.Standard Deviation Demographics.Ethnicity.Asians ... Employment.Work Activity.Design Employment.Work Activity.Development Employment.Work Activity.Human Resources Employment.Work Activity.Managing/Supervising People/Projects Employment.Work Activity.Other Employment.Work Activity.Productions/Operations/Maintenance Employment.Work Activity.Professional Service Employment.Work Activity.Qualitity/Productivity Management Employment.Work Activity.Sales, Purchasing, Marketing Employment.Work Activity.Teaching . 0 1993 | 1295598 | Biological Sciences | 999999.0 | 0.0 | 160585.73 | 51000.0 | 13432 | 297818.25 | 84495 | ... | 118772 | 191867 | 365049 | 539430 | 99749 | 103385 | 506252 | 269042 | 215169 | 381908 | . 1 1993 | 211875 | Chemical Engineering | 999999.0 | 9000.0 | 126176.52 | 56000.0 | 3375 | 245705.77 | 27531 | ... | 82344 | 76108 | 59299 | 102248 | 16361 | 30480 | 24690 | 63895 | 44780 | 17718 | . 2 1993 | 507616 | Chemistry | 999999.0 | 8000.0 | 148872.00 | 60000.0 | 7834 | 276000.33 | 49984 | ... | 81772 | 123256 | 121783 | 208278 | 35007 | 40898 | 129716 | 114801 | 78059 | 104191 | . 3 1993 | 336366 | Civil Engineering | 999999.0 | 10000.0 | 129070.55 | 50000.0 | 4035 | 259543.49 | 37295 | ... | 133430 | 62031 | 108338 | 203035 | 37940 | 28639 | 70727 | 116758 | 73133 | 26892 | . 4 1993 | 1070111 | Computer Science and Math | 999999.0 | 0.0 | 134299.53 | 49000.0 | 9996 | 269323.82 | 83826 | ... | 251941 | 200490 | 287405 | 439446 | 62482 | 73411 | 126083 | 223467 | 168404 | 234507 | . 5 rows × 50 columns . grad_df.dtypes . Year int64 Demographics.Total int64 Education.Major object Salaries.Highest float64 Salaries.Lowest float64 Salaries.Mean float64 Salaries.Median float64 Salaries.Quantity int64 Salaries.Standard Deviation float64 Demographics.Ethnicity.Asians int64 Demographics.Ethnicity.Minorities int64 Demographics.Ethnicity.Whites int64 Demographics.Gender.Females int64 Demographics.Gender.Males int64 Education.Degrees.Bachelors int64 Education.Degrees.Doctorates int64 Education.Degrees.Masters int64 Education.Degrees.Professionals int64 Employment.Employer Type.Business/Industry int64 Employment.Employer Type.Educational Institution int64 Employment.Employer Type.Government int64 Employment.Reason Working Outside Field.Career Change int64 Employment.Reason Working Outside Field.Family-related int64 Employment.Reason Working Outside Field.Job Location int64 Employment.Reason Working Outside Field.No Job Available int64 Employment.Reason Working Outside Field.Other int64 Employment.Reason Working Outside Field.Pay/Promotion int64 Employment.Reason Working Outside Field.Working Conditions int64 Employment.Reason for Not Working.Family int64 Employment.Reason for Not Working.Layoff int64 Employment.Reason for Not Working.No Job Available int64 Employment.Reason for Not Working.No need/want int64 Employment.Reason for Not Working.Student int64 Employment.Status.Employed int64 Employment.Status.Not in Labor Force int64 Employment.Status.Unemployed int64 Employment.Work Activity.Accounting/Finance/Contracts int64 Employment.Work Activity.Applied Research int64 Employment.Work Activity.Basic Research int64 Employment.Work Activity.Computer Applications int64 Employment.Work Activity.Design int64 Employment.Work Activity.Development int64 Employment.Work Activity.Human Resources int64 Employment.Work Activity.Managing/Supervising People/Projects int64 Employment.Work Activity.Other int64 Employment.Work Activity.Productions/Operations/Maintenance int64 Employment.Work Activity.Professional Service int64 Employment.Work Activity.Qualitity/Productivity Management int64 Employment.Work Activity.Sales, Purchasing, Marketing int64 Employment.Work Activity.Teaching int64 dtype: object . #this was code I was messing with but could not get to go . a = grad_df.loc[:10].plot(kind = &#39;barh&#39;, x = &#39;Education.Major&#39;, y = &#39;Salaries.Median&#39;) a.set_title(&#39;First 10 data values and their Median Salary&#39;) . Text(0.5, 1.0, &#39;First 10 data values and their Median Salary&#39;) . This initial examiniation of the data set shows the stem makes the most in terms of median salary. I would aggregate the data so that all Chemistry majors are in 1 variable and I would do the same for each of other variable. I believe that would work and makes sense. . Exploring Billionaires dataset . pdcorgis(&#39;billionaires&#39;) . ../../datasets/csv/billionaires/billionaires.csv . name rank year company.founded company.name company.relationship company.sector company.type demographics.age demographics.gender ... location.gdp location.region wealth.type wealth.worth in billions wealth.how.category wealth.how.from emerging wealth.how.industry wealth.how.inherited wealth.how.was founder wealth.how.was political . 0 Bill Gates | 1 | 1996 | 1975 | Microsoft | founder | Software | new | 40 | male | ... | 8.100000e+12 | North America | founder non-finance | 18.5 | New Sectors | True | Technology-Computer | not inherited | True | True | . 1 Bill Gates | 1 | 2001 | 1975 | Microsoft | founder | Software | new | 45 | male | ... | 1.060000e+13 | North America | founder non-finance | 58.7 | New Sectors | True | Technology-Computer | not inherited | True | True | . 2 Bill Gates | 1 | 2014 | 1975 | Microsoft | founder | Software | new | 58 | male | ... | 0.000000e+00 | North America | founder non-finance | 76.0 | New Sectors | True | Technology-Computer | not inherited | True | True | . 3 Warren Buffett | 2 | 1996 | 1962 | Berkshire Hathaway | founder | Finance | new | 65 | male | ... | 8.100000e+12 | North America | founder non-finance | 15.0 | Traded Sectors | True | Consumer | not inherited | True | True | . 4 Warren Buffett | 2 | 2001 | 1962 | Berkshire Hathaway | founder | Finance | new | 70 | male | ... | 1.060000e+13 | North America | founder non-finance | 32.3 | Traded Sectors | True | Consumer | not inherited | True | True | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 2609 Wu Chung-Yi | 1565 | 2014 | 1991 | Tingyi | investor | beverages and food | new | 55 | male | ... | 0.000000e+00 | East Asia | executive | 1.0 | Traded Sectors | True | Non-consumer industrial | not inherited | True | True | . 2610 Wu Xiong | 1565 | 2014 | 1999 | Biostime International Holdings | owner | infant formula | new | 0 | male | ... | 0.000000e+00 | East Asia | executive | 1.0 | Traded Sectors | True | Consumer | not inherited | True | True | . 2611 Yang Keng | 1565 | 2014 | 0 | Blue Ray Corp | chairman | real estate | new | 53 | male | ... | 0.000000e+00 | East Asia | self-made finance | 1.0 | Financial | True | Real Estate | not inherited | True | True | . 2612 Zdenek Bakala | 1565 | 2014 | 1994 | Patria Finance | founder | coal | new | 53 | male | ... | 0.000000e+00 | Europe | privatized and resources | 1.0 | Resource Related | True | Mining and metals | not inherited | True | True | . 2613 Zhu Wenchen | 1565 | 2014 | 1999 | Furen Pharmaceutical Group | chairman | pharmaceuticals | new | 48 | male | ... | 0.000000e+00 | East Asia | executive | 1.0 | New Sectors | True | Technology-Medical | not inherited | True | True | . 2614 rows × 22 columns . bill_df = pdcorgis(&#39;billionaires&#39;) . ../../datasets/csv/billionaires/billionaires.csv . bill_df.head() . name rank year company.founded company.name company.relationship company.sector company.type demographics.age demographics.gender ... location.gdp location.region wealth.type wealth.worth in billions wealth.how.category wealth.how.from emerging wealth.how.industry wealth.how.inherited wealth.how.was founder wealth.how.was political . 0 Bill Gates | 1 | 1996 | 1975 | Microsoft | founder | Software | new | 40 | male | ... | 8.100000e+12 | North America | founder non-finance | 18.5 | New Sectors | True | Technology-Computer | not inherited | True | True | . 1 Bill Gates | 1 | 2001 | 1975 | Microsoft | founder | Software | new | 45 | male | ... | 1.060000e+13 | North America | founder non-finance | 58.7 | New Sectors | True | Technology-Computer | not inherited | True | True | . 2 Bill Gates | 1 | 2014 | 1975 | Microsoft | founder | Software | new | 58 | male | ... | 0.000000e+00 | North America | founder non-finance | 76.0 | New Sectors | True | Technology-Computer | not inherited | True | True | . 3 Warren Buffett | 2 | 1996 | 1962 | Berkshire Hathaway | founder | Finance | new | 65 | male | ... | 8.100000e+12 | North America | founder non-finance | 15.0 | Traded Sectors | True | Consumer | not inherited | True | True | . 4 Warren Buffett | 2 | 2001 | 1962 | Berkshire Hathaway | founder | Finance | new | 70 | male | ... | 1.060000e+13 | North America | founder non-finance | 32.3 | Traded Sectors | True | Consumer | not inherited | True | True | . 5 rows × 22 columns . bill_df.dtypes . name object rank int64 year int64 company.founded int64 company.name object company.relationship object company.sector object company.type object demographics.age int64 demographics.gender object location.citizenship object location.country code object location.gdp float64 location.region object wealth.type object wealth.worth in billions float64 wealth.how.category object wealth.how.from emerging bool wealth.how.industry object wealth.how.inherited object wealth.how.was founder bool wealth.how.was political bool dtype: object . bill_df.sort_values(&#39;year&#39;) . name rank year company.founded company.name company.relationship company.sector company.type demographics.age demographics.gender ... location.gdp location.region wealth.type wealth.worth in billions wealth.how.category wealth.how.from emerging wealth.how.industry wealth.how.inherited wealth.how.was founder wealth.how.was political . 0 Bill Gates | 1 | 1996 | 1975 | Microsoft | founder | Software | new | 40 | male | ... | 8.100000e+12 | North America | founder non-finance | 18.5 | New Sectors | True | Technology-Computer | not inherited | True | True | . 432 Banyong Lamsam | 143 | 1996 | 1945 | Kasikornbank | relation | banking | new | 0 | male | ... | 1.820000e+11 | East Asia | inherited | 2.5 | Financial | True | Money Management | not inherited | True | True | . 433 George Soros | 144 | 1996 | 1969 | Soros Fund Management | founder | hedge funds | new | 65 | male | ... | 8.100000e+12 | North America | self-made finance | 2.5 | Financial | True | Hedge funds | not inherited | True | True | . 434 Abigail Johnson | 145 | 1996 | 1946 | Fidelity Investments | relation | investment banking | new | 34 | female | ... | 8.100000e+12 | North America | inherited | 2.5 | Financial | True | Money Management | 3rd generation | True | True | . 435 Jon Huntsman | 146 | 1996 | 1982 | Huntsman chemical | founder | chemicals | new | 58 | male | ... | 8.100000e+12 | North America | founder non-finance | 2.5 | Traded Sectors | True | Non-consumer industrial | not inherited | True | True | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1506 Yitzhak Tshuva | 520 | 2014 | 1992 | El-Ad Group | founder and chairman | real estate | new | 65 | male | ... | 0.000000e+00 | Middle East/North Africa | self-made finance | 3.1 | Financial | True | Real Estate | not inherited | True | True | . 1505 William Conway, Jr. | 520 | 2014 | 1987 | Carlyle Group | founder | private equity | new | 64 | male | ... | 0.000000e+00 | North America | self-made finance | 3.1 | Financial | True | Private equity/leveraged buyout | not inherited | True | True | . 1504 Wang Yung-Tsai | 520 | 2014 | 1954 | Formosa Plastics | founder | petrochemicals | new | 93 | male | ... | 0.000000e+00 | East Asia | founder non-finance | 3.1 | Traded Sectors | True | Non-consumer industrial | not inherited | True | True | . 1514 H. Fisk Johnson | 551 | 2014 | 1886 | S. C. Johnson &amp; Son | relation | cleaning supplies | new | 55 | male | ... | 0.000000e+00 | North America | inherited | 3.0 | Traded Sectors | True | Consumer | 5th generation or longer | True | True | . 2613 Zhu Wenchen | 1565 | 2014 | 1999 | Furen Pharmaceutical Group | chairman | pharmaceuticals | new | 48 | male | ... | 0.000000e+00 | East Asia | executive | 1.0 | New Sectors | True | Technology-Medical | not inherited | True | True | . 2614 rows × 22 columns . a = bill_df.loc[:25].plot(kind = &#39;barh&#39;, x = &#39;company.sector&#39;, y = &#39;rank&#39;) a.set_title(&quot;The first 25 values displaying the rank of certain Sectors&quot;) . Text(0.5, 1.0, &#39;The first 25 values displaying the rank of certain Sectors&#39;) . This is important to examine as not every software company ranks as number one. Although the first 3 are software, we see software again somewhere ranking at 5. Nevertheless, it is important to note that in this inital examination of this dataset, software is the wealthiest sector. . Looking at Election Data . pdcorgis(&quot;election&quot;) . ../../datasets/csv/election/election.csv . Location.County Location.State Location.State Abbreviation Vote Data.Ben Carson.Number of Votes Vote Data.Ben Carson.Party Vote Data.Ben Carson.Percent of Votes Vote Data.Bernie Sanders.Number of Votes Vote Data.Bernie Sanders.Party Vote Data.Bernie Sanders.Percent of Votes Vote Data.Carly Fiorina.Number of Votes ... Vote Data.Rand Paul.Percent of Votes Vote Data.Rick Santorum.Number of Votes Vote Data.Rick Santorum.Party Vote Data.Rick Santorum.Percent of Votes Vote Data.Ted Cruz.Number of Votes Vote Data.Ted Cruz.Party Vote Data.Ted Cruz.Percent of Votes Vote Data.Uncommitted.Number of Votes Vote Data.Uncommitted.Party Vote Data.Uncommitted.Percent of Votes . 0 Abbeville | South Carolina | SC | 305 | Republican | 8.3 | 312 | Democrat | 17.0 | 0 | ... | 0.0 | 0 | Republican | 0.0 | 876 | Republican | 23.9 | 0 | NaN | 0.0 | . 1 Abbot | Maine | ME | 0 | Republican | 0.0 | 1 | Democrat | 100.0 | 0 | ... | 0.0 | 0 | Republican | 0.0 | 0 | Republican | 0.0 | 0 | NaN | 0.0 | . 2 Abington | Massachusetts | MA | 53 | Republican | 2.5 | 1352 | Democrat | 53.4 | 0 | ... | 0.0 | 0 | Republican | 0.0 | 208 | Republican | 9.9 | 0 | NaN | 0.0 | . 3 Acadia | Louisiana | LA | 0 | Republican | 0.0 | 1087 | Democrat | 31.4 | 0 | ... | 0.0 | 0 | Republican | 0.0 | 1454 | Republican | 38.2 | 0 | NaN | 0.0 | . 4 Accomack | Virginia | VA | 411 | Republican | 9.5 | 682 | Democrat | 27.4 | 0 | ... | 0.0 | 0 | Republican | 0.0 | 685 | Republican | 15.9 | 0 | NaN | 0.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 4211 Yuma | Arizona | AZ | 0 | Republican | 0.0 | 2156 | Democrat | 31.5 | 0 | ... | 0.0 | 0 | Republican | 0.0 | 2556 | Republican | 28.8 | 0 | NaN | 0.0 | . 4212 Yuma | Colorado | CO | 0 | Republican | 0.0 | 33 | Democrat | 39.3 | 0 | ... | 0.0 | 0 | Republican | 0.0 | 0 | Republican | 0.0 | 0 | NaN | 0.0 | . 4213 Zapata | Texas | TX | 4 | Republican | 4.7 | 685 | Democrat | 23.6 | 0 | ... | 0.0 | 0 | Republican | 0.0 | 32 | Republican | 37.2 | 0 | NaN | 0.0 | . 4214 Zavala | Texas | TX | 0 | Republican | 0.0 | 373 | Democrat | 18.1 | 0 | ... | 0.0 | 0 | Republican | 0.0 | 0 | Republican | 0.0 | 0 | NaN | 0.0 | . 4215 Ziebach | South Dakota | SD | 0 | Republican | 0.0 | 132 | Democrat | 58.9 | 0 | ... | 0.0 | 0 | Republican | 0.0 | 25 | Republican | 21.7 | 0 | NaN | 0.0 | . 4216 rows × 51 columns . df = pdcorgis(&quot;election&quot;) . ../../datasets/csv/election/election.csv . df.iloc[:50].plot(kind = &quot;bar&quot;, x = &#39;Location.State&#39; , y = &#39;Vote Data.Bernie Sanders.Number of Votes&#39;) figsize=(12,6) . The above shows the first 50 values in the data set that have the sum of those who voted for Bernie Sanders. By this evaluation Califorina has the most votes for Bernie Sanders as a Democratic State. This is to also mention that the first 50 values are set by county and not state by a whole. I would need to aggregate all of California or make a new data frame for just votes for Bernie Sanders and States in order to get a much more accurate data plot. .",
            "url": "https://michaeliniquez3.github.io/Assignment-9-/fastpages/jupyter/2022/03/04/Assingment5.html",
            "relUrl": "/fastpages/jupyter/2022/03/04/Assingment5.html",
            "date": " • Mar 4, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://michaeliniquez3.github.io/Assignment-9-/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://michaeliniquez3.github.io/Assignment-9-/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://michaeliniquez3.github.io/Assignment-9-/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://michaeliniquez3.github.io/Assignment-9-/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}